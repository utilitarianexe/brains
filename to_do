refactoring
  environmnet majic numbers and copy paste code(should make base class)
  horrific hack to reset s_tag
  main file is too long and needs tests
  paramterize delay or generally env variables
  need a better way to believe rewards are hitting at the right times
  me need a world to step
  switch from "model" to "brain"
  use dacite package instead of __post__init__ bs
  test parameters confusion
  simple is a bad name
  move parameters out of model file and networks out of network file
  clean up environment to allow for better tests without putting the test env in its own class
  also better tests for environment
  pull out parameters especially environment and display
  remove to do type comments
  document
  get rid of magic numbers(most at least moved to class definitions)
  follow python style guide
  reorder parameters
  defaults on dataclasses for obvious variables, maybe freeze
  simple_model output is a mess
  get example and spirit working with video, export, import, and pyplot
  arguably export should be a type of display
  I don't like how we attach cells to synapses in the simple model
  use private consistantly the _ thing
  simple_model class could be split in 3

advertising
  what else is out there
  who would want this

installation/updates
  auto run tests on submit

new funcitonality
  cells
    output balancing

  easy environment
    inhibition
    multiple layers

  display
    in pygame display labels for input and wins
    accuracy graph
    red should be positive green negative
    display synapse strengths
    pause button
    click on cells to see cell info
    adjust parameters without restarting
    detect screen size
    attach to unreal engine or something
    UI to build network
    cli interface
      parameters for choosing model,network,environment,display
      don't have the display modules run the model the main should

  management
    periodically save brains during run
    add a ./run_tests file that runs a bunch of complete runs
    labels for connections in run files
    add an adder environment as a mid level task
    should be able to quit and still get output file
    maybe all runs should make output files?
    make a plotting tool with our basic equations in it
      like how much does s_tag decay in an epoch
    should be a model level synapse connection strength that is then scaled per synapse
    apply the complex environment to a simple model
    elf grid specs
    run neurons in compliled language

  create a one variable cell type example
    no input current variable
    cell just needs enough input spikes in short enough window to spike
    only one timestep delay betwenn precell spike and post cell spike

think about
  try handwriting with one less layer
  when we reward should we stick at 1 or hit it once
  what distribution should we use for noise
  what happens if we double spike during reward
  feel like the model is unnecarily complex
  get more backround on simulation generally(really need to retake calc)
  connecitons strengths should not just be random at the start but maybe also randomly change a bit?
  step sizes
  resettting input connections